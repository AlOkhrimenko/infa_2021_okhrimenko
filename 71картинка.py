{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1eb520f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pygame\n",
    "from pygame.draw import *\n",
    "\n",
    "pygame.init()\n",
    "\n",
    "FPS = 30\n",
    "\n",
    "\n",
    "\n",
    "# это первое задание\n",
    "def ex4():\n",
    "    screen = pygame.display.set_mode((400, 600))\n",
    "    rect(screen, (125, 125, 125), (0, 0, 400, 250))\n",
    "    ellipse(screen, (50, 50, 50), (200, 100, 220, 30))\n",
    "    ellipse(screen, (80, 80, 80), (20, 50, 250, 40))\n",
    "    rect(screen, (54, 44, 18), (20, 100, 200, 300))\n",
    "    rect(screen, (53, 23, 12), (50, 320, 40, 50))\n",
    "    rect(screen, (53, 23, 12), (100, 320, 40, 50))\n",
    "    rect(screen, (255, 255, 0), (150, 320, 40, 50))\n",
    "    rect(screen, (50, 50, 50), (0, 250, 240, 30))\n",
    "    for i in range(4):\n",
    "        rect(screen, (172, 138, 100), (40 + i * 130 / 3, 100, 30, 150))\n",
    "    for i in range(7):\n",
    "        rect(screen, (50, 50, 50), (10 + i * 35, 220, 10, 30))\n",
    "    rect(screen, (50, 50, 50), (20, 210, 200, 10))\n",
    "    polygon(screen, (0, 0, 0), ((0, 100), (40, 70), (200, 70), (240, 100)))\n",
    "    circle(screen, (255, 255, 255), (360, 40), 30)\n",
    "    rect(screen, (50, 50, 50), (50, 60, 5, 30))\n",
    "    rect(screen, (50, 50, 50), (140, 45, 10, 45))\n",
    "    rect(screen, (50, 50, 50), (190, 40, 7, 50))\n",
    "    ellipse(screen, (100, 100, 100), (180, 20, 200, 30))\n",
    "    ellipse(screen, (70, 70, 70), (50, 30, 200, 30))\n",
    "    rect(screen, (50, 50, 50), (70, 30, 20, 60))\n",
    "    polygon(\n",
    "        screen,\n",
    "        (200, 200, 200),\n",
    "        (\n",
    "            (250, 550),\n",
    "            (270, 450),\n",
    "            (290, 440),\n",
    "            (350, 525),\n",
    "            (340, 545),\n",
    "            (310, 525),\n",
    "            (300, 535),\n",
    "            (270, 525),\n",
    "        ),\n",
    "    )\n",
    "    circle(screen, (200, 200, 200), (280, 445), 20)\n",
    "    circle(screen, (0, 0, 0), (270, 440), 5)\n",
    "    circle(screen, (0, 0, 0), (285, 440), 5)\n",
    "\n",
    "# функция рисует задний план\n",
    "def drawBckgrnd(scr):\n",
    "    rect(scr, (125, 125, 125), (0, 0, 400, 250))\n",
    "\n",
    "# функция рисует дом    \n",
    "def drawHs(scr, stPnt, scl=1):\n",
    "    rect(scr, (54, 44, 18), (stPnt[0], stPnt[1], 200 * scl, 300 * scl))\n",
    "    rect(\n",
    "        scr,\n",
    "        (53, 23, 12),\n",
    "        (stPnt[0] + 30 * scl, stPnt[1] + 220 * scl, 40 * scl, 50 * scl),\n",
    "    )\n",
    "    rect(\n",
    "        scr,\n",
    "        (53, 23, 12),\n",
    "        (stPnt[0] + 80 * scl, stPnt[1] + 220 * scl, 40 * scl, 50 * scl),\n",
    "    )\n",
    "    rect(\n",
    "        scr,\n",
    "        (255, 255, 0),\n",
    "        (stPnt[0] + 130 * scl, stPnt[1] + 220 * scl, 40 * scl, 50 * scl),\n",
    "    )\n",
    "    rect(\n",
    "        scr,\n",
    "        (50, 50, 50),\n",
    "        (stPnt[0] - 20 * scl, stPnt[1] + 150 * scl, 240 * scl, 30 * scl),\n",
    "    )\n",
    "    for i in range(4):\n",
    "        rect(\n",
    "            scr,\n",
    "            (172, 138, 100),\n",
    "            (stPnt[0] + (20 + i * 130 / 3) * scl, stPnt[1], 30 * scl, 150 * scl),\n",
    "        )\n",
    "    for i in range(7):\n",
    "        rect(\n",
    "            scr,\n",
    "            (50, 50, 50),\n",
    "            (stPnt[0] - (10 - i * 35) * scl, stPnt[1] + 120 * scl, 10 * scl, 30 * scl),\n",
    "        )\n",
    "    rect(scr, (50, 50, 50), (stPnt[0], stPnt[1] + 110 * scl, 200 * scl, 10 * scl))\n",
    "    polygon(\n",
    "        scr,\n",
    "        (0, 0, 0),\n",
    "        (\n",
    "            (stPnt[0] - 20 * scl, stPnt[1]),\n",
    "            (stPnt[0] + 20 * scl, stPnt[1] - 30 * scl),\n",
    "            (stPnt[0] + 180 * scl, stPnt[1] - 30 * scl),\n",
    "            (stPnt[0] + 220 * scl, stPnt[1]),\n",
    "        ),\n",
    "    )\n",
    "\n",
    "# функция рисует призрака\n",
    "def drawGhst(scr, stPnt, scl=1, hScl=1):\n",
    "    polygon(\n",
    "        scr,\n",
    "        (200, 200, 200),\n",
    "        (\n",
    "            (stPnt[0], stPnt[1]),\n",
    "            (stPnt[0] + 20 * scl * hScl, stPnt[1] - 100 * scl),\n",
    "            (stPnt[0] + 40 * scl * hScl, stPnt[1] - 110 * scl),\n",
    "            (stPnt[0] + 100 * scl * hScl, stPnt[1] - 25 * scl),\n",
    "            (stPnt[0] + 90 * scl * hScl, stPnt[1] - 5 * scl),\n",
    "            (stPnt[0] + 60 * scl * hScl, stPnt[1] - 25 * scl),\n",
    "            (stPnt[0] + 50 * scl * hScl, stPnt[1] - 15 * scl),\n",
    "            (stPnt[0] + 20 * scl * hScl, stPnt[1] - 25 * scl),\n",
    "        ),\n",
    "    )\n",
    "    circle(\n",
    "        scr,\n",
    "        (200, 200, 200),\n",
    "        (stPnt[0] + 30 * scl * hScl, stPnt[1] - 105 * scl),\n",
    "        20 * scl,\n",
    "    )\n",
    "    circle(scr, (0, 0, 0), (stPnt[0] + 20 * scl * hScl, stPnt[1] - 110 * scl), 5 * scl)\n",
    "    circle(scr, (0, 0, 0), (stPnt[0] + 35 * scl * hScl, stPnt[1] - 110 * scl), 5 * scl)\n",
    "\n",
    "# это второе задание\n",
    "def ex5():\n",
    "    screen = pygame.display.set_mode((400, 600))\n",
    "    drawBckgrnd(screen)\n",
    "    drawHs(screen, (20, 220), 0.5)\n",
    "    drawHs(screen, (150, 170), 0.5)\n",
    "    drawHs(screen, (290, 120), 0.5)\n",
    "    circle(screen, (255, 255, 255), (360, 40), 30)\n",
    "    ellipse(screen, (100, 100, 100), (180, 20, 200, 30))\n",
    "    ellipse(screen, (70, 70, 70), (50, 30, 200, 30))\n",
    "    drawGhst(screen, (250, 550), 1, -1)\n",
    "    drawGhst(screen, (250, 550))\n",
    "    drawGhst(screen, (100, 550), 0.5)\n",
    "\n",
    "ex5() \n",
    "\n",
    "pygame.display.update()\n",
    "clock = pygame.time.Clock()\n",
    "finished = False\n",
    "\n",
    "while not finished:\n",
    "    clock.tick(FPS)\n",
    "    for event in pygame.event.get():\n",
    "        if event.type == pygame.QUIT:\n",
    "            finished = True\n",
    "\n",
    "pygame.quit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16437562",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
